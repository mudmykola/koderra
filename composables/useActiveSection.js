import { ref, onMounted, onBeforeUnmount, nextTick } from 'vue'export const useActiveSection = (ids = []) => {  const activeSection = ref('home')  let observer  const updateHomeFallback = () => {    if (window.scrollY < 100) {      activeSection.value = 'home'    }  }  const callback = entries => {    let visibleSections = entries.filter(entry => entry.isIntersecting)    if (visibleSections.length > 0) {      const topMost = visibleSections[0]      activeSection.value = topMost.target.id    }  }  onMounted(async () => {    await nextTick()    if (!('IntersectionObserver' in window)) return    observer = new IntersectionObserver(callback, {      root: null,      threshold: 0.3,      rootMargin: '0px 0px -20% 0px'    })    ids.forEach(id => {      const el = document.getElementById(id)      if (el) observer.observe(el)    })    window.addEventListener('scroll', updateHomeFallback)  })  onBeforeUnmount(() => {    if (observer) observer.disconnect()    window.removeEventListener('scroll', updateHomeFallback)  })  return { activeSection }}