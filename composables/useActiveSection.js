import {ref, onMounted, onBeforeUnmount, nextTick, watch} from 'vue'import {useRoute} from 'vue-router'export const useActiveSection = (ids = []) => {    const activeSection = ref('home')    const route = useRoute()    let observer = null    const updateHomeFallback = () => {        if (window.scrollY < 100) {            activeSection.value = 'home'        }    }    const callback = entries => {        const visibleSections = entries.filter(entry => entry.isIntersecting)        if (visibleSections.length > 0) {            activeSection.value = visibleSections[0].target.id        }    }    const setupObserver = () => {        if (!('IntersectionObserver' in window)) return        if (observer) observer.disconnect()        observer = new IntersectionObserver(callback, {            root: null,            threshold: 0.3,            rootMargin: '0px 0px -20% 0px'        })        ids.forEach(id => {            const el = document.getElementById(id)            if (el) observer.observe(el)        })    }    onMounted(async () => {        await nextTick()        setupObserver()        window.addEventListener('scroll', updateHomeFallback)    })    watch(() => route.fullPath, async () => {        await nextTick()        setupObserver()    })    onBeforeUnmount(() => {        if (observer) observer.disconnect()        window.removeEventListener('scroll', updateHomeFallback)    })    return {activeSection}}